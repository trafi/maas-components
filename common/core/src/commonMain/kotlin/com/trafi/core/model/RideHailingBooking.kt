/**
 * Core Whitelabel API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.trafi.core.model

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 *
 *
 * @param id
 * @param status
 * @param provider
 * @param productDisplayName
 * @param isSharedRide
 * @param currentTime
 * @param vehicleType
 * @param statusInfo
 * @param paymentMethodId
 * @param tripPurposeId
 * @param operationRestrictions
 * @param driver
 * @param car
 * @param start
 * @param end
 * @param pickup
 * @param dropoff
 * @param etaToPickupSeconds
 * @param etaToDropoffSeconds
 * @param totalTripTimeSeconds
 * @param startTime
 * @param endTime
 * @param price
 * @param currency
 * @param polyline
 * @param cancellationNotice
 * @param requiredAction
 * @param feedbackId
 * @param purchaseBreakdown
 * @param notes
 */
@Serializable
data class RideHailingBooking(

    @SerialName(value = "id") @Required val id: kotlin.String,

    @SerialName(value = "status") @Required val status: RideHailingBookingStatus,

    @SerialName(value = "provider") @Required val provider: Provider,

    @SerialName(value = "productDisplayName") @Required val productDisplayName: kotlin.String,

    @SerialName(value = "isSharedRide") @Required val isSharedRide: kotlin.Boolean,

    @SerialName(value = "currentTime") @Required val currentTime: kotlin.Long,

    @SerialName(value = "vehicleType") @Required val vehicleType: VehicleType,

    @SerialName(value = "statusInfo") val statusInfo: RideHailingBookingStatusInfo? = null,

    @SerialName(value = "paymentMethodId") val paymentMethodId: kotlin.String? = null,

    @SerialName(value = "tripPurposeId") val tripPurposeId: kotlin.String? = null,

    @SerialName(value = "operationRestrictions") val operationRestrictions: OperationRestrictions? = null,

    @SerialName(value = "driver") val driver: Driver? = null,

    @SerialName(value = "car") val car: Car? = null,

    @SerialName(value = "start") val start: Location? = null,

    @SerialName(value = "end") val end: Location? = null,

    @SerialName(value = "pickup") val pickup: Location? = null,

    @SerialName(value = "dropoff") val dropoff: Location? = null,

    @SerialName(value = "etaToPickupSeconds") val etaToPickupSeconds: kotlin.Int? = null,

    @SerialName(value = "etaToDropoffSeconds") val etaToDropoffSeconds: kotlin.Int? = null,

    @SerialName(value = "totalTripTimeSeconds") val totalTripTimeSeconds: kotlin.Int? = null,

    @SerialName(value = "startTime") val startTime: kotlin.String? = null,

    @SerialName(value = "endTime") val endTime: kotlin.String? = null,

    @SerialName(value = "price") val price: kotlin.Double? = null,

    @SerialName(value = "currency") val currency: kotlin.String? = null,

    @SerialName(value = "polyline") val polyline: kotlin.String? = null,

    @SerialName(value = "cancellationNotice") val cancellationNotice: kotlin.String? = null,

    @SerialName(value = "requiredAction") val requiredAction: RequiredAction? = null,

    @SerialName(value = "feedbackId") val feedbackId: kotlin.String? = null,

    @SerialName(value = "purchaseBreakdown") val purchaseBreakdown: PurchaseBreakdown? = null,

    @SerialName(value = "notes") val notes: kotlin.collections.List<Note>? = null

)
