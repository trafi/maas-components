/**
 * Core Whitelabel API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.trafi.core.model

import kotlinx.serialization.*

/**
 *
 *
 * Values: NONE,CREDIT_CARD,DIRECT_DEBIT,PAY_PAL,PREPAY,DIGITAL_WALLET,MOBILITY_BUDGET
 */
@Serializable
enum class PaymentMethodType(val value: kotlin.String) {

    @SerialName(value = "NONE")
    NONE("NONE"),

    @SerialName(value = "CREDIT_CARD")
    CREDIT_CARD("CREDIT_CARD"),

    @SerialName(value = "DIRECT_DEBIT")
    DIRECT_DEBIT("DIRECT_DEBIT"),

    @SerialName(value = "PAY_PAL")
    PAY_PAL("PAY_PAL"),

    @SerialName(value = "PREPAY")
    PREPAY("PREPAY"),

    @SerialName(value = "DIGITAL_WALLET")
    DIGITAL_WALLET("DIGITAL_WALLET"),

    @SerialName(value = "MOBILITY_BUDGET")
    MOBILITY_BUDGET("MOBILITY_BUDGET");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is PaymentMethodType) "$data" else null

        /**
         * Returns a valid [PaymentMethodType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): PaymentMethodType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}
