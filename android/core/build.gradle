plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'org.openapi.generator' version '4.3.1'
    id 'org.jlleitschuh.gradle.ktlint' version '9.3.0'
}

def generatedModelPath = "src/main/java/generated"
def swaggerSchemaPath = "build/swagger.json"

android {
    compileSdkVersion 30

    defaultConfig {
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main.java.srcDirs += generatedModelPath
    }
}

androidExtensions {
    features = ["parcelize"]
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.squareup.moshi:moshi:1.10.0'
}

task generateModels(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    inputSpec = project.file(swaggerSchemaPath).path
    outputDir = project.file(generatedModelPath).path
    modelPackage = "com.trafi.core.android.model"

    logToStderr = true
    validateSpec = false

    // Generate models without docs or tests
    systemProperties = [
            models    : "",
            modelDocs : "false",
            modelTests: "false"
    ]

    // Kotlin generator config
    generatorName = "kotlin"
    library = "multiplatform"
    configOptions = [
            dateLibrary       : "string",
            collectionType    : "list",
            enumPropertyNaming: "original",
            parcelizeModels   : "false",
            sourceFolder      : ""
    ]
}

task fetchSwaggerSchema {
    doLast {
        def envVar = "TRAFI_SWAGGER_SPEC_URL"
        def localProp = "trafi.swaggerSpecUrl"
        def schemaUrl = resolveProperty(localProp, envVar)
        if (schemaUrl == null) {
            throw new GradleException("Specify $localProp in local.properties or $envVar to fetch the Swagger schema")
        }

        def swaggerSchemaFile = project.file(swaggerSchemaPath)
        swaggerSchemaFile.parentFile.mkdirs()
        swaggerSchemaFile.createNewFile()

        println("Fetching Swagger schema from $schemaUrl")
        new URL(schemaUrl).withInputStream { i ->
            swaggerSchemaFile.withOutputStream {
                it << i
            }
        }
    }
}

task swagen {
    dependsOn(fetchSwaggerSchema, generateModels)
    finalizedBy(ktlintFormat)
}

ext {
    PUBLISH_ARTIFACT_ID = 'core-android'
}

apply from: "${rootProject.projectDir}/scripts/maven.gradle"
